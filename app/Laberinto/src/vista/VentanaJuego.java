/*
 * Nombre del paquete: vista
 */
package vista;

import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import modelo.Modelo;
import org.jpl7.Atom;
import org.jpl7.Query;
import org.jpl7.Term;
import org.jpl7.Variable;

/**
 *
 * @author Alex Sanchez Cespedes
 */
public class VentanaJuego extends javax.swing.JFrame implements KeyListener{
    private Term[][] matrizMadre;
    Modelo pModelo;
    int x;
    int y;
    Atom[] listaValores = {new Atom("i"), new Atom("x"), new Atom("f"), new Atom("ad"), new Atom("at"), new Atom("ab"), new Atom("ar"), new Atom("inter")};
    JLabel[][] matrizLabels;
    int posX;
    int posY;
    int cantidadMovimientos;
    String pNombre;
    String tipoFinalizacion;
    
    private final ImageIcon bloque = new ImageIcon(getClass().getResource("/assets/bolck4.png"));
    private final ImageIcon suelo = new ImageIcon(getClass().getResource("/assets/piso.png"));
    private final ImageIcon meta = new ImageIcon(getClass().getResource("/assets/final.png"));
    private final ImageIcon inicio = new ImageIcon(getClass().getResource("/assets/playerInicio.png"));
    private final ImageIcon abajo = new ImageIcon(getClass().getResource("/assets/playerDown.png"));
    private final ImageIcon arriba = new ImageIcon(getClass().getResource("/assets/playerUp.png"));
    private final ImageIcon izquierda = new ImageIcon(getClass().getResource("/assets/playerIz.png"));
    private final ImageIcon derecha = new ImageIcon(getClass().getResource("/assets/playerDe.png"));
    private final ImageIcon ganarMsg = new ImageIcon(getClass().getResource("/assets/ganaste.png"));
    
    
    
    
    
    /**
     * Creates new form VentanaJuego
     * @param modelo
     * @param nombre
     */
    public VentanaJuego(Modelo modelo, String nombre) {
        pModelo = modelo;
        pNombre = nombre;
        initComponents();
        nombreL.setText(nombre);
        addKeyListener(this);
        this.setExtendedState(VentanaJuego.MAXIMIZED_BOTH);
        Dibujar();
    }
    
    /*
    * Metodo para realizar la presentacion grafica del laberinto
    */
    public final void Dibujar() {
        matrizMadre = pModelo.GetMatrizMadre();
        x = pModelo.GetX();
        y = pModelo.GetY();
        matrizLabels = new JLabel[x][y];
        panelJuego.setLayout(new GridLayout(x, y));
        for (int i = 0;i!=x;i++) {
            for (int j = 0;j!=y;j++) {
                JLabel label = new JLabel();
                if(matrizMadre[i][j].equals(listaValores[1])){
                    label.setIcon(bloque);
                }
                else if (matrizMadre[i][j].equals(listaValores[0])) {
                    label.setIcon(inicio);
                }
                else if (matrizMadre[i][j].equals(listaValores[2])) {
                    label.setIcon(meta);
                }
                else {
                    label.setIcon(suelo);
                }
                matrizLabels[i][j] = label;
                panelJuego.add(label);
            }
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        abandonar = new javax.swing.JButton();
        reiniciar = new javax.swing.JButton();
        panelJuego = new javax.swing.JPanel();
        nombreL = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1920, 1100));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1920, 1100));

        jPanel2.setPreferredSize(new java.awt.Dimension(1920, 1100));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        abandonar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/abandonar.png"))); // NOI18N
        abandonar.setToolTipText("");
        abandonar.setBorder(null);
        abandonar.setBorderPainted(false);
        abandonar.setContentAreaFilled(false);
        abandonar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        abandonar.setDoubleBuffered(true);
        abandonar.setFocusPainted(false);
        abandonar.setFocusable(false);
        abandonar.setRequestFocusEnabled(false);
        abandonar.setRolloverEnabled(false);
        abandonar.setVerifyInputWhenFocusTarget(false);
        abandonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abandonarActionPerformed(evt);
            }
        });
        jPanel2.add(abandonar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 220, -1));

        reiniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reiniciar.png"))); // NOI18N
        reiniciar.setBorder(null);
        reiniciar.setBorderPainted(false);
        reiniciar.setContentAreaFilled(false);
        reiniciar.setFocusPainted(false);
        reiniciar.setFocusable(false);
        reiniciar.setRequestFocusEnabled(false);
        reiniciar.setVerifyInputWhenFocusTarget(false);
        reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarActionPerformed(evt);
            }
        });
        jPanel2.add(reiniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, -1, -1));

        panelJuego.setBackground(new java.awt.Color(0, 0, 0));
        panelJuego.setAlignmentX(0.0F);
        panelJuego.setAlignmentY(0.0F);
        panelJuego.setAutoscrolls(true);
        panelJuego.setPreferredSize(new java.awt.Dimension(880, 970));
        panelJuego.setLayout(new java.awt.GridBagLayout());
        jPanel2.add(panelJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 60, -1, -1));

        nombreL.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        nombreL.setForeground(new java.awt.Color(255, 255, 255));
        nombreL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nombreL.setFocusable(false);
        nombreL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nombreL.setRequestFocusEnabled(false);
        nombreL.setVerifyInputWhenFocusTarget(false);
        jPanel2.add(nombreL, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 200, 70));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nombre.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 300, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo5.jpg"))); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(1980, 1100));
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    * Metodo de respuesta de click al boton abandonar
    */
    private void abandonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abandonarActionPerformed
        tipoFinalizacion = "abandono";
        pModelo.RegistrarJugador(pNombre, String.valueOf(cantidadMovimientos), tipoFinalizacion);
        pModelo.limpiar();
        VentanaInicio ventanaInicio = new VentanaInicio();
        ventanaInicio.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_abandonarActionPerformed
    /*
    * Metodo de respuesta de click al boton reiniciar
    */
    private void reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarActionPerformed
       tipoFinalizacion = "abandono";
        pModelo.RegistrarJugador(pNombre, String.valueOf(cantidadMovimientos), tipoFinalizacion);
        pModelo.limpiar();
        String direccion = pModelo.GetDireccion();
        pModelo.BuscarArchivo(direccion);
        VentanaJuego ventanaJuego = new VentanaJuego(pModelo, pNombre);
        ventanaJuego.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_reiniciarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abandonar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel nombreL;
    private javax.swing.JPanel panelJuego;
    private javax.swing.JButton reiniciar;
    // End of variables declaration//GEN-END:variables

    /*
    * Metodo que reinicia la partida de juego
    */
    public void Reiniciar() {
        VentanaInicio nuevoJuego = new VentanaInicio();
        nuevoJuego.setVisible(true);
        Query limpieza = new Query("limpieza");
        System.out.println(limpieza.hasSolution());
        this.dispose();
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyPressed(KeyEvent e) {}
    
    /*
    * Metodo de respuesta para cada uno de los movimientos del jugador
    */
    @Override
    public void keyReleased(KeyEvent e) {
        Variable X = new Variable("X");
        Variable Y = new Variable("Y");
        Query posicionActual = new Query("obtenerPosicionActual", new Term[] {X, Y});
        Map<String, Term> resultados = posicionActual.oneSolution();
        posX = Integer.parseInt(resultados.get("X").toString());
        posY = Integer.parseInt(resultados.get("Y").toString());
        switch(e.getKeyCode()) {
           case(38): //UP
               Query movimientoUP = new Query("movimiento", new Term[]{listaValores[6]});
               System.out.println(movimientoUP.hasSolution());
               Query verificarUP = new Query("verificarPosicion");
               System.out.print("Solucion> ");System.out.println(verificarUP.hasSolution());
               System.out.println(posX);System.out.println(posY);
      
               if (verificarUP.hasSolution()) {
                   cantidadMovimientos++;
                   System.out.println("si entra");
                   Query movimientoValido =  new Query("aMovimientoVerificado", new Term[] {listaValores[6]});
                   System.out.println(movimientoValido.hasSolution());
                   matrizLabels[posX][posY].setIcon(suelo); //arriba
                   
                   Variable X2 = new Variable("X");
                   Variable Y2 = new Variable("Y");
                   
                   Query posicionNueva = new Query("obtenerPosicionActual", new Term[] {X2, Y2});
                   Map<String, Term> resultadosUP = posicionNueva.oneSolution();
                   int nuevoX = Integer.parseInt(resultadosUP.get("X").toString());
                   int nuevoY = Integer.parseInt(resultadosUP.get("Y").toString());
                   
                   matrizLabels[nuevoX][nuevoY].setIcon(arriba); //arriba
                   Query ganar = new Query("verificarGane");
                   if (ganar.hasSolution()) {
                       tipoFinalizacion = "exitoso";
                       System.out.println("gano");
                       pModelo.RegistrarJugador(pNombre, String.valueOf(cantidadMovimientos), tipoFinalizacion);
                       VentanaGane terminarJuego = new VentanaGane(this);
                       terminarJuego.setLocationRelativeTo(null);
                       terminarJuego.setVisible(true);
                       
                   }
               }
               break;
           case(40):  //DW
               Query movimientoDown = new Query("movimiento", new Term[]{listaValores[5]});
               System.out.println(movimientoDown.hasSolution());
               Query verificarDown = new Query("verificarPosicion");
               
               if (verificarDown.hasSolution()) {
                   cantidadMovimientos++;
                   Query movimientoValido =  new Query("aMovimientoVerificado", new Term[] {listaValores[5]});
                   System.out.println(movimientoValido.hasSolution());
               
                   matrizLabels[posX][posY].setIcon(suelo); //abajo
                   Variable X2 = new Variable("X");
                   Variable Y2 = new Variable("Y");
                   
                   Query posicionNueva = new Query("obtenerPosicionActual", new Term[] {X2, Y2});
                   Map<String, Term> resultadosDown = posicionNueva.oneSolution();
                   int nuevoX = Integer.parseInt(resultadosDown.get("X").toString());
                   int nuevoY = Integer.parseInt(resultadosDown.get("Y").toString());
                   
                   matrizLabels[nuevoX][nuevoY].setIcon(abajo); //abajo
                   Query ganar = new Query("verificarGane");
                   if (ganar.hasSolution()) {
                       tipoFinalizacion = "exitoso";
                       System.out.println("gano");
                       pModelo.RegistrarJugador(pNombre, String.valueOf(cantidadMovimientos), tipoFinalizacion);
                       VentanaGane terminarJuego = new VentanaGane(this);
                       terminarJuego.setLocationRelativeTo(null);
                       terminarJuego.setVisible(true);
                   }
               }
               break;
            case(39): //RG
               Query movimientoRG = new Query("movimiento", new Term[]{listaValores[3]});
               System.out.println(movimientoRG.hasSolution());
               Query verificarRG = new Query("verificarPosicion");
               
               if (verificarRG.hasSolution()) {
                   cantidadMovimientos++;
                   Query movimientoValido =  new Query("aMovimientoVerificado", new Term[] {listaValores[3]});
                   System.out.println(movimientoValido.hasSolution());
                   matrizLabels[posX][posY].setIcon(suelo);
                   Variable X2 = new Variable("X");
                   Variable Y2 = new Variable("Y");
                   
                   Query posicionNueva = new Query("obtenerPosicionActual", new Term[] {X2, Y2});
                   Map<String, Term> resultadosRG = posicionNueva.oneSolution();
                   int nuevoX = Integer.parseInt(resultadosRG.get("X").toString());
                   int nuevoY = Integer.parseInt(resultadosRG.get("Y").toString());
                   
                   matrizLabels[nuevoX][nuevoY].setIcon(derecha);
                   Query ganar = new Query("verificarGane");
                   if (ganar.hasSolution()) {
                       tipoFinalizacion = "exitoso";
                       pModelo.RegistrarJugador(pNombre, String.valueOf(cantidadMovimientos), tipoFinalizacion);
                       System.out.println("gano");
                       pModelo.ObtenerJugadores();
                       VentanaGane terminarJuego = new VentanaGane(this);
                       terminarJuego.setLocationRelativeTo(null);
                       terminarJuego.setVisible(true);
                   }
               }
                break;
            case(37): //IZ
                Query movimientoIZ = new Query("movimiento", new Term[]{listaValores[4]});
                System.out.println(movimientoIZ.hasSolution());
                Query verificarIZ = new Query("verificarPosicion");
               
               if (verificarIZ.hasSolution()) {
                   cantidadMovimientos++;
                   Query movimientoValido =  new Query("aMovimientoVerificado", new Term[] {listaValores[4]});
                   System.out.println(movimientoValido.hasSolution());
                   matrizLabels[posX][posY].setIcon(suelo);
                   Variable X2 = new Variable("X");
                   Variable Y2 = new Variable("Y");
                   
                   Query posicionNueva = new Query("obtenerPosicionActual", new Term[] {X2, Y2});
                   Map<String, Term> resultadosIZ = posicionNueva.oneSolution();
                   int nuevoX = Integer.parseInt(resultadosIZ.get("X").toString());
                   int nuevoY = Integer.parseInt(resultadosIZ.get("Y").toString());
                   
                   matrizLabels[nuevoX][nuevoY].setIcon(izquierda); 
                   Query ganar = new Query("verificarGane");
                   if (ganar.hasSolution()) {
                       tipoFinalizacion = "exitoso";
                       pModelo.RegistrarJugador(pNombre, String.valueOf(cantidadMovimientos), tipoFinalizacion);
                       System.out.println("gano");
                       VentanaGane terminarJuego = new VentanaGane(this);
                       terminarJuego.setLocationRelativeTo(null);
                       terminarJuego.setVisible(true);
                   }
               }
               break;
                
            default:
                break;
        } 
    }
}
